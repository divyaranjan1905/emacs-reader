#+TITLE: The GNU Emacs Reader
#+OPTIONS: toc:nil

[[file:extras/emacs-reader-logo.png]]

An all-in-one document reader for GNU Emacs, supporting all [[* Supported Formats][major document formats]]. This package intends to take from =doc-view=, =nov.el=, and =pdf-tools= and make them better. And as such, it is effectively a *drop-in replacement* for them

* Screencast
[[file:extras/emacs-reader-2025-05-14_04.32.41.gif]]

* Supported Formats
The Emacs Reader (via MuPDF) renders all the formats below by way of SVGs (Scalable Vector Graphics):

** Well-supported Formats
+ PDF
+ EPUB
+ MOBI
+ FB2
+ XPS/OpenXPS
+ CBZ

** Office Document Formats
These formats below are not really for document reading, and as such while they are supported by MuPDF and can be opened fine, it’s just not going to be that good of an experience. It should only be used for quickly checking the textual contents of the document, and certainly cannot be edited inside Emacs. (You may use LibreOffice for that.)

*** Open Document Formats (LibreOffice)
+ ODT
+ ODS
+ ODP
+ ODG

*** Proprietary Micro$oft Formats
Using these formats is heavily discouraged, you should /always/ prefer the above formats from LibreOffice (Which can also you help you edit these formats if you need to). But since MuPDF does come with some very minimal support for these proprietary formats as well, they can also be viewed:

+ DOCX
+ PPTX
+ XLSX

* Dependencies
Technically the only thing this package depends on is =mupdf=, but for various reasons, the way it is packaged in most distributions (at least GNU Guix and Arch) is that it has a conflict with on of its own dependencies, effectively making the package unusable. So for now, =mupdf= is provided as a submodule in the repository. We have spoken to the =mupdf= developers, and they have fixed it upstream, we will wait for GNU/Linux distributions to follow before removing the submodule (More details at [[https://codeberg.org/divyaranjan/emacs-reader/issues/18][#18]]).

So, since you’d be building =mupdf= from source to produce the shared object =libmupdf.so= which the package relies on, you’d need to have the depencies that =mupdf= has, check them from [[https://mupdf.readthedocs.io/en/1.25.0/quick-start-guide.html#get-the-mupdf-source-code][here]] and make sure you have them installed. But most of them are actually bundled with =mupdf= itself.

* Installation
For now, until the package has been published to GNU ELPA, the only way to install and use it is through locally cloning the repo and building it. This is different across platforms:

** GNU/Linux
On GNU/Linux all you need is: =gcc= and =make=. Then you can simply install through the Emacs’ built-in =package-vc= or the [[https://github.com/radian-software/straight.el][straight]] package manager. The built-in =package-vc= still has some quirks, but here are the recipes for both:

- =use-package= with =package-vc=:
   #+begin_src emacs-lisp
     (setq package-vc-allow-build-commands t)
     (use-package reader
       :vc (:url "https://codeberg.org/divyaranjan/emacs-reader"
     	    :make "all"))
   #+end_src

-  =use-package= with =straight=
   #+begin_src emacs-lisp
     (use-package reader
       :straight '(reader :type git :host codeberg :repo "divyaranjan/emacs-reader"
     	      :files ("*.el" "render-core.so")
     	      :pre-build ("make" "all")))
   #+end_src

*NOTE:* Both of these commands will take a /long/ time, because they’re going to invoke the =make= command which will recursively fetch the submodule and it’s dependencies. *It’ll hang your Emacs for a good ~15-20m, so be careful.*

** MacOS
Since MacOS’ package manager Homebrew already has the latest version of MuPDF (1.26.0), you don’t need the submodule at all. You just need to do:
#+begin_src sh
  brew install gcc
  brew install make
  brew install mupdf
#+end_src

And then use the straight or package-vc recipe from the GNU/Linux section.

** Windows
With Windows, things are slightly tricky. The only toolchain where I got it to work is with MSYS2. So, you need to install that and then use MSYS2 to install the following:

#+begin_src shell
pacman -S make mingw-w64-x86_64-gcc git pkg-config
#+end_src

After that, you can run =git clone --recurse-submodules https://codeberg.org/divyaranjan/emacs-reader.git= and then:
#+begin_src sh
make all
#+end_src

** Manual
This section is about how to install this package manually. Intended to be used by developers.

After cloning the repository, follow the instructions from the previous section to install dependencies on your respective operating system.

Then, you run =make= in the git repository, as noted earlier this may take a few depending on if it is fetching and building =mupdf=.

After this, you add the path to emacs-reader git repository to =load-path=,
#+begin_src emacs-lisp
  (add-to-list 'load-path "/path/to/emacs-reader")
#+end_src

You can also utilize =use-package= to do the same,
#+begin_src emacs-lisp
  (use-package reader
    :vc t
    :load-path "/path/to/emacs-reader")
#+end_src

To test emacs-reader in a default Emacs config, use something like:
#+begin_src shell
  emacs -q -L . -l reader.el
#+end_src
This command adds the current directory to path, and loads =reader.el=.

This will not work for testing auto loading though. You can try using =package-vc-install-from-checkout= to test that. [[https://codeberg.org/attachments/2555c252-0977-484e-b369-38b18a321a48][This video]] demonstrates how to do that.

* Key Bindings
- =Page Up=, or =n= for going to next page
- =Page Down=, or  =p=  for going to previous page
- =C-n= for scrolling down.
- =C-p= for scrolling up.
- =C-b= for scrolling left.
- =C-f= for scrolling right.
- =Q= for closing the Emacs Reader buffer.
- =M-<= for going to the first page.
- =M->= for going to the last page.
- =M-g g= for going to a particular page.
- =M-v=  for scrolling to the top of the page.
- =C-v= for scrolling to the end of the page.
- =SPC=, =S-SPC= , and =DEL= make the above two commands keep scrolling the pages.
- === and =-= for zooming in and out of the current page.
- =H= to make the page fit the height of the current window.
- =W= to make the page fit the width of the current window.

* How It Works
This package is entirely distinct from =DocView= and =pdf-tools= in both its architecture and implementation. It leverages Emacs’ dynamic/native modules which allows it to interoperate with other programming languages outside of its Emacs Lisp environment.

Thus, we rely on the efficient MuPDF library as a shared object with which our dynamic modules work. All the tasks that require manual memory management, efficiently rendering SVGs, and so on are delegated to the C backend, and Emacs takes care of exclusively what it’s good at: displaying produced SVGs and buffer management.

For understanding how dynamic modules work within Emacs, please consult the following article I wrote:

https://www.phimulambda.org/blog/emacs-dynamic-module.html

* Live Streams

I have been streaming the development of this package on [[https://tv.dyne.org/c/phimulambda/][my PeerTube channel: (phi (mu (lambda)))]]

Here are the recordings of the streams:

- [[https://tv.dyne.org/w/8W8o4fWz94bMYVMUWExkX7][Part I: Introduction]]
- [[https://tv.dyne.org/w/fmJnktiZMjrUKJU2s8Pxkq][Part II: Making Overlays Centered and Zoomable]]
- [[https://tv.dyne.org/w/fsHrNnwYYnnYweArgtBHSe][Part III: Multi-Threading]]

The streams happen on *Sundays, biweekly at around 5:30 PM UTC*. Follow the channel on Peertube or my [[https://mathstodon.xyz/@divyaranjan][Mastodon]] to be notified when I stream. You can also find some stream notes [[file:doc/][here]].

If you wish to join the discussion for the package, you should join the IRC channel =#phi-mu-lambda= on [[https://libera.chat/][Libera]].

* License
Licensed under GPLv3. Check [[file:LICENSE][LICENSE]] and [[file:CONTRIBUTORS][CONTRIBUTORS]] for details.

The logo of the project was made by the author and is shared under [[http://creativecommons.org/licenses/by-sa/4.0/][CC-BY-SA-4.0]]. The logo uses the following artworks from GNU:

- [[https://www.gnu.org/graphics/heckert_gnu.html][A Bold GNU Head by Aurélio A. Heckert]]
- [[https://commons.wikimedia.org/wiki/File:Emacs_512.png][Icon for Emacs 23 by Kentaro Ohkouchi]]

The interesting history of different Emacs logos is outlined by Luis Fernandes, in his article on [[https://www.ee.torontomu.ca/~elf/emacs/logo/][The Design of the Emacs Logo]].
